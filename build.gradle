
// courier gradle build file

buildscript {
    repositories {
        maven { url "http://maven.zz.com/nexus/content/groups/public" }
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.14.RELEASE"
        // mybatis-generator 插件路径
        classpath "gradle.plugin.com.arenagod.gradle:mybatis-generator-plugin:1.4"
    }
}

apply plugin: "java"
apply plugin: "idea"
apply plugin: "org.springframework.boot"
apply plugin: "war"
apply plugin: "checkstyle"
apply plugin: "io.spring.dependency-management"
//引入 mybatis-generator 插件
apply plugin: "com.arenagod.gradle.MybatisGenerator"

repositories {
    maven { url "http://maven.zz.com/nexus/content/groups/public" }
    mavenCentral()
}

[compileJava, compileTestJava].each() {
    it.options.compilerArgs += ["-Xlint:unchecked", "-Xlint:deprecation", "-Xlint:-options"]
    it.options.encoding = "UTF-8"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'daichao'
version = '1.0'
description = "WeShare daichao"

war {
    archiveName = "daichao.war"
}

// build information (appver)
task buildinfo << {
    def buildver = ""
    def tag = ""
    try {
        def revision = 'git rev-list --count HEAD'.execute().text.trim()
        def hash = 'git rev-parse --short HEAD'.execute().text.trim()
        buildver = "r${revision}-${hash}"
        tag = 'git describe --tags'.execute().text.trim()
    } catch (any) {
        println "warn! failed to get revision"
    }

    new File("src/main/resources/properties/buildinfo.properties").withWriter { w ->
        w.write("build.module=CashCourier\n")
        w.write("build.revision=" + buildver + "\n")
        w.write("build.tag=" + tag + "\n")
        w.write("build.datetime =" + (new Date()).format("YYYY-MM-dd HH:mm:ss") + "\n")
        w.write("build.hostname=" + InetAddress.localHost.hostName)
    }
}
processResources.dependsOn buildinfo

checkstyle {
    configFile = file("$rootDir/checkstyle.xml")
    toolVersion = "6.5"
    ignoreFailures = true
    if (rootProject.hasProperty("checkstyle.ignoreFailures")) {
        ignoreFailures = rootProject.properties["checkstyle.ignoreFailures"].toBoolean()
    }
}

checkstyleMain {
    source = fileTree(dir: "src/main", include: "**/*.java")
}

checkstyleTest {
    source = fileTree(dir: "src/test", include: "**/*.java")
}

dependencyManagement {
    imports { mavenBom "com.weshare.sdk.whale:biz-sdk-bom:1.2.3" }
}

dependencies {
    //// servlet and runtime dependencies ////
    compile "javax.servlet:javax.servlet-api"
    compile "org.springframework.boot:spring-boot-starter-tomcat"

    compile "org.springframework.boot:spring-boot-starter-web"
    //// spring  ////
    compile "org.springframework:spring-webmvc"
    compile "org.springframework:spring-aop"
    compile "org.springframework:spring-orm"
    compile "org.springframework:spring-aspects"

    ///// AMQP (rabbit) //////
    compile "org.springframework.amqp:spring-rabbit"

    ///// redis //////
    compile "org.springframework.data:spring-data-redis"
    compile "redis.clients:jedis"

    ///// mysql, mybatis and database connection pool //////
    compile "com.zaxxer:HikariCP"
    compile "mysql:mysql-connector-java"
    compile "org.mybatis:mybatis-spring"
    compile "org.mybatis:mybatis"

    compile "com.googlecode.sli4j:sli4j-slf4j-logback"
    ///// alibaba dubbo /////
    compile "com.alibaba:dubbo"
    compile("com.github.sgroschupf:zkclient") {
        exclude(group: "log4j")
    }
    compile("org.apache.curator:curator-framework") {
        exclude(group: "log4j")
    }

    ///// utility, such as json, etc. //////
    compile "com.google.code.gson:gson"

    ////apache commons////
    compile "com.weshare.sdk.parrot:sdk-parrot"
    compile "org.apache.httpcomponents:httpclient:4.5.2"
    compile "com.weshare.sdk.whale:sdk-whale-s3"
    compile "com.weshare.sdk.whale:sdk-whale-biz"


    // 微信加解密引入bcprov
    compile group:'org.bouncycastle',name:'bcprov-jdk16',version:'1.46'

    // mybatis-generator core 包
    compile group: 'org.mybatis.generator', name: 'mybatis-generator-core', version:'1.3.2'
    //wxsdk
    compile "com.github.binarywang:weixin-java-miniapp:3.3.0"
    compile "org.projectlombok:lombok"
    compile "io.jsonwebtoken:jjwt:0.9.1"
    compile "com.auth0:java-jwt:3.4.0"
    compile "com.github.pagehelper:pagehelper-spring-boot-starter:1.2.5"
    //// testing supportes ////
    testCompile "org.springframework.boot:spring-boot-starter-test"
    compile "io.springfox:springfox-swagger2:2.7.0"
    compile "io.springfox:springfox-swagger-ui:2.7.0"
    compile group: 'commons-httpclient', name: 'commons-httpclient', version: '3.1'
    // https://mvnrepository.com/artifact/com.alibaba/fastjson
    compile group: 'com.alibaba', name: 'fastjson', version: '1.2.58'
    compile fileTree(dir:'lib',includes:['*jar'])

}

configurations {
    mybatisGenerator
}
// mybatis-generator.xml 配置路径
// 这里会遇到个问题：MyBatis Generator 通过xml生成，有日志但是没有生成文件成功的问题，
// 原因：mac下是找不到 ./src 路径的，需要全路径，如下配置。windows则为src/main/resources/generator.xml
mybatisGenerator {
    verbose = true
    overwrite = true
    configFile = 'src/main/resources/generator/generatorConfig.xml'
}